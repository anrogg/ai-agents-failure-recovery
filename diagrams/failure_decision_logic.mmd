flowchart TD
    Start([Agent Receives Request]) --> CheckForced{failure_mode<br/>parameter provided?}

    CheckForced -->|Yes| LogForced[Log: Forced failure mode activated]
    LogForced --> ReturnForced[Return: True, failure_mode]

    CheckForced -->|No| CheckProbabilistic{PROBABILISTIC_FAILURES<br/>environment variable = true?}

    CheckProbabilistic -->|No| ReturnNormal[Return: False, None]
    CheckProbabilistic -->|Yes| EvaluateProbabilistic[Evaluate Probabilistic Failure]

    EvaluateProbabilistic --> InitSession{Session state exists?}
    InitSession -->|No| CreateSession["Create session state:<br/>failure_count: 0<br/>last_failure_time: None<br/>clarification_requests: 0<br/>message_count: 0"]
    InitSession -->|Yes| UpdateSession[Increment message_count]

    CreateSession --> UpdateSession
    UpdateSession --> CheckCooldown{"Time since last failure<br/>< 30 seconds?"}

    CheckCooldown -->|Yes| LogCooldown[Log: Failure cooldown active]
    LogCooldown --> ReturnNoCooldown[Return: False, None]

    CheckCooldown -->|No| IterateFailures["For each failure mode<br/>check probability"]

    IterateFailures --> CheckMode{Current failure mode}

    CheckMode --> CalculateProbability["Base probability × FAILURE_RATE_MULTIPLIER"]

    CalculateProbability --> SpecialLogic{Special adjustments?}
    SpecialLogic -->|"INFINITE_LOOP + clarification_requests ≥ 1"| DoubleProb["Probability × 2.0"]
    SpecialLogic -->|Same as last failure mode| ReduceProb["Probability × 0.3"]
    SpecialLogic -->|No special case| KeepProb[Keep adjusted probability]

    DoubleProb --> RollRandom["random.random() < probability?"]
    ReduceProb --> RollRandom
    KeepProb --> RollRandom

    RollRandom -->|Yes| TriggerFailure["Update session state:<br/>failure_count += 1<br/>last_failure_time = now<br/>last_failure_mode = mode"]
    RollRandom -->|No| NextMode{More modes to check?}

    TriggerFailure --> LogProbabilistic["Log: Probabilistic failure triggered<br/>with probability and session stats"]
    LogProbabilistic --> ReturnTriggered[Return: True, selected_mode]

    NextMode -->|Yes| CheckMode
    NextMode -->|No| ReturnNoFailure[Return: False, None]

    %% Failure Execution Paths
    ReturnForced --> ExecuteFailure[Execute Selected Failure]
    ReturnTriggered --> ExecuteFailure

    ExecuteFailure --> FailureType{Failure Type}
    FailureType -->|Output Quality| SelectResponse["Select random response<br/>from failure mode's configured options"]
    FailureType -->|Behavioral| SelectBehavior["Select random behavior<br/>from failure mode's configured options"]
    FailureType -->|Integration| ThrowIntegration["Execute failure mode's<br/>configured exception with delay"]
    FailureType -->|Resource| ThrowResource["Execute failure mode's<br/>configured exception"]

    %% End States
    ReturnNormal --> NormalProcessing[Continue with normal LLM processing]
    ReturnNoCooldown --> NormalProcessing
    ReturnNoFailure --> NormalProcessing
    SelectResponse --> End([End: Failure Applied])
    SelectBehavior --> End
    ThrowIntegration --> End
    ThrowResource --> End
    NormalProcessing --> End

    %% Configuration Notes
    Start -.-> ConfigNote1["CONFIGURATION:<br/>probabilistic_mode from PROBABILISTIC_FAILURES env var<br/>failure_rate_multiplier from FAILURE_RATE_MULTIPLIER env var"]
    IterateFailures -.-> ConfigNote2["ALL 11 FAILURE MODES:<br/>Output Quality: 30%, 25%, 20%<br/>Behavioral: 20%, 15%<br/>Integration: 12%, 10%, 8%<br/>Resource: 7%, 5%, 3%"]
    TriggerFailure -.-> ConfigNote3["SESSION STATE TRACKING:<br/>30-second cooldown<br/>Anti-repetition logic<br/>Loop detection for INFINITE_LOOP"]

    %% Styling
    classDef startEnd fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef decision fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef action fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef failure fill:#ffebee,stroke:#d32f2f,stroke-width:2px
    classDef config fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px

    class Start,End startEnd
    class CheckForced,CheckProbabilistic,InitSession,CheckCooldown,CheckMode,SpecialLogic,RollRandom,NextMode,FailureType decision
    class LogForced,EvaluateProbabilistic,CreateSession,UpdateSession,LogCooldown,IterateFailures,CalculateProbability,DoubleProb,ReduceProb,KeepProb,TriggerFailure,LogProbabilistic,ExecuteFailure,SelectResponse,SelectBehavior action
    class ReturnForced,ReturnTriggered,ReturnNormal,ReturnNoCooldown,ReturnNoFailure,ThrowIntegration,ThrowResource failure
    class ConfigNote1,ConfigNote2,ConfigNote3 config